name: Deploy to Cloud Run

on:
    push:
        branches:
            - main
        paths:
            - '.github/**'
            - 'app/**'
            - 'bootstrap/**'
            - 'config/**'
            - 'database/**'
            - 'public/**'
            - 'resources/**'
            - 'routes/**'
            - 'storage/**'
            - 'tests/**'
            - 'vendor/**'
            - '.dockerignore'
            - 'artisan'
            - 'composer.json'
            - 'composer.lock'
            - 'Dockerfile'
            - 'package-lock.json'
            - 'package.json'
            - 'phpunit.xml'
            - 'vite.config.js'

jobs:
    deploy:
      runs-on: ubuntu-latest
      steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Authenticate with Google Cloud
              uses: google-github-actions/auth@v1
              with:
                  credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

            - name: Authenticate Docker with GCR
              run: |
                  gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

            - name: Setup Google Cloud SDK
              uses: google-github-actions/setup-gcloud@v1
              with:
                  project_id: ${{ secrets.GCP_PROJECT_ID }}
                  service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

            - name: Build and push Docker image
              run: |
                  docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.APP_IMAGE_NAME }} .
                  docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.APP_IMAGE_NAME }}

            - name: Deploy to Cloud Run
              run: |
                  gcloud run deploy ${{ secrets.GCP_CLOUD_RUN_SERVICE_NAME }} \
                    --image ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.APP_IMAGE_NAME }} \
                    --region ${{ secrets.GCP_REGION }} \
                    --platform managed \
                    --allow-unauthenticated \
                    --port ${{ secrets.HTTP_PORT }} \
                    --set-env-vars APP_NAME=${{ secrets.APP_NAME }}, \
                    --set-env-vars APP_ENV=${{ secrets.APP_ENV }}, \
                    --set-env-vars APP_KEY=${{ secrets.APP_KEY }}, \
                    --set-env-vars APP_DEBUG=${{ secrets.APP_DEBUG }}, \
                    --set-env-vars APP_URL=${{ secrets.APP_URL }}, \
                    --set-env-vars APP_LOCALE=${{ secrets.APP_LOCALE }}, \
                    --set-env-vars APP_FALLBACK_LOCALE=${{ secrets.APP_FALLBACK_LOCALE }}, \
                    --set-env-vars APP_FAKER_LOCALE=${{ secrets.APP_FAKER_LOCALE }}, \
                    --set-env-vars APP_MAINTENANCE_DRIVER=${{ secrets.APP_MAINTENANCE_DRIVER }}, \
                    --set-env-vars PHP_CLI_SERVER_WORKERS=${{ secrets.PHP_CLI_SERVER_WORKERS }}, \
                    --set-env-vars BCRYPT_ROUNDS=${{ secrets.BCRYPT_ROUNDS }}, \
                    --set-env-vars LOG_CHANNEL=${{ secrets.LOG_CHANNEL }}, \
                    --set-env-vars LOG_STACK=${{ secrets.LOG_STACK }}, \
                    --set-env-vars LOG_DEPRECATIONS_CHANNEL=${{ secrets.LOG_DEPRECATIONS_CHANNEL }}, \
                    --set-env-vars LOG_LEVEL=${{ secrets.LOG_LEVEL }}, \
                    --set-env-vars DB_CONNECTION=${{ secrets.DB_CONNECTION }}, \
                    --set-env-vars DB_HOST=${{ secrets.DB_HOST }}, \
                    --set-env-vars DB_PORT=${{ secrets.DB_PORT }}, \
                    --set-env-vars DB_DATABASE=${{ secrets.DB_DATABASE }}, \
                    --set-env-vars DB_USERNAME=${{ secrets.DB_USERNAME }}, \
                    --set-env-vars DB_PASSWORD=${{ secrets.DB_PASSWORD }}, \
                    --set-env-vars DB_URL=${{ secrets.DB_URL }}, \
                    --set-env-vars SESSION_DRIVER=${{ secrets.SESSION_DRIVER }}, \
                    --set-env-vars SESSION_LIFETIME=${{ secrets.SESSION_LIFETIME }}, \
                    --set-env-vars SESSION_ENCRYPT=${{ secrets.SESSION_ENCRYPT }}, \
                    --set-env-vars SESSION_PATH=${{ secrets.SESSION_PATH }}, \
                    --set-env-vars SESSION_DOMAIN=${{ secrets.SESSION_DOMAIN }}, \
                    --set-env-vars BROADCAST_CONNECTION=${{ secrets.BROADCAST_CONNECTION }}, \
                    --set-env-vars FILESYSTEM_DISK=${{ secrets.FILESYSTEM_DISK }}, \
                    --set-env-vars QUEUE_CONNECTION=${{ secrets.QUEUE_CONNECTION }}, \
                    --set-env-vars CACHE_STORE=${{ secrets.CACHE_STORE }}, \
                    --set-env-vars MEMCACHED_HOST=${{ secrets.MEMCACHED_HOST }}, \
                    --set-env-vars REDIS_CLIENT=${{ secrets.REDIS_CLIENT }}, \
                    --set-env-vars REDIS_HOST=${{ secrets.REDIS_HOST }}, \
                    --set-env-vars REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}, \
                    --set-env-vars REDIS_PORT=${{ secrets.REDIS_PORT }}, \
                    --set-env-vars MAIL_MAILER=${{ secrets.MAIL_MAILER }}, \
                    --set-env-vars MAIL_SCHEME=${{ secrets.MAIL_SCHEME }}, \
                    --set-env-vars MAIL_HOST=${{ secrets.MAIL_HOST }}, \
                    --set-env-vars MAIL_PORT=${{ secrets.MAIL_PORT }}, \
                    --set-env-vars MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}, \
                    --set-env-vars MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}, \
                    --set-env-vars MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}, \
                    --set-env-vars MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}, \
                    --set-env-vars AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}, \
                    --set-env-vars AWS_USE_PATH_STYLE_ENDPOINT=${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}, \
                    --set-env-vars VITE_APP_NAME=${{ secrets.VITE_APP_NAME }}

            - name: Cleanup old images
              run: |
                  IMAGE_NAME="${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.APP_IMAGE_NAME }}"
                  
                  # 最新5つのタグを取得
                  KEEP_IMAGES=$(gcloud artifacts docker images list ${IMAGE_NAME} --format="value(DIGEST)" --sort-by="~UPDATE_TIME" | head -n 5)

                  # すべてのタグを取得し、最新5つを除外したものを削除
                  gcloud artifacts docker images list ${IMAGE_NAME} --format="value(DIGEST)" --sort-by="~UPDATE_TIME" | tail -n +6 | while read -r DIGEST; do
                      if [[ ! -z "${DIGEST}" ]]; then
                          echo "Deleting old image: ${IMAGE_NAME}:${DIGEST}"
                          gcloud artifacts docker images delete "$IMAGE_NAME@$DIGEST" --quiet
                      fi
                  done